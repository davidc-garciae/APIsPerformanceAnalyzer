"""
Script de prueba r√°pida para verificar que el analizador funciona
"""

import asyncio
import httpx
import time
import os
import subprocess
import sys


async def test_api_connectivity():
    """Prueba b√°sica de conectividad de la API"""
    print("üß™ Probando conectividad b√°sica de m√≥dulos...")
    
    try:
        # Probar importaciones
        from core.monitoring import system_monitor
        from core.profiling import code_profiler
        print("‚úÖ Importaciones exitosas")
        
        # Probar funciones b√°sicas de monitoreo
        cpu_data = system_monitor.get_cpu_metrics()
        memory_data = system_monitor.get_memory_metrics()
        
        if "error" not in cpu_data and "error" not in memory_data:
            print("‚úÖ M√≥dulo de monitoreo funcional")
            print(f"   üíª CPU: {cpu_data.get('cpu_percent_total', 'N/A')}%")
            print(f"   üß† Memoria: {memory_data.get('ram', {}).get('percentage', 'N/A')}%")
        else:
            print("‚ùå Error en m√≥dulo de monitoreo")
            return False
        
        # Probar perfilador b√°sico
        snapshot = code_profiler.get_process_profile_snapshot()
        if snapshot.get("success"):
            print("‚úÖ M√≥dulo de perfilado funcional")
            process_info = snapshot.get("process", {})
            print(f"   üîç Proceso actual: PID {process_info.get('pid', 'N/A')}")
        else:
            print("‚ùå Error en m√≥dulo de perfilado")
            return False
        
        print("\nüéâ ¬°Todos los m√≥dulos principales funcionan correctamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        return False


async def test_api_endpoints():
    """Prueba los endpoints de la API si est√° ejecut√°ndose"""
    print("\nüåê Probando endpoints de la API...")
    
    base_url = "http://localhost:8000"
    
    endpoints_to_test = [
        "/",
        "/api/v1/",
        "/api/v1/metrics/cpu",
        "/api/v1/metrics/memory",
        "/api/v1/info/system"
    ]
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            for endpoint in endpoints_to_test:
                try:
                    response = await client.get(f"{base_url}{endpoint}")
                    if response.status_code == 200:
                        print(f"‚úÖ {endpoint}: OK")
                    else:
                        print(f"‚ö†Ô∏è {endpoint}: Status {response.status_code}")
                except httpx.ConnectError:
                    print(f"‚ùå {endpoint}: No se pudo conectar (¬øAPI no ejecut√°ndose?)")
                except Exception as e:
                    print(f"‚ùå {endpoint}: Error - {e}")
    
    except Exception as e:
        print(f"‚ùå Error general probando API: {e}")


def print_banner():
    """Imprime banner del test"""
    print("=" * 60)
    print("üöÄ ANALIZADOR DE RENDIMIENTO - SCRIPT DE PRUEBA")
    print("=" * 60)


def print_instructions():
    """Imprime instrucciones para ejecutar el sistema completo"""
    print("\n" + "="*60)
    print("üìã INSTRUCCIONES PARA EJECUTAR EL SISTEMA COMPLETO")
    print("="*60)
    print("\n1Ô∏è‚É£ Ejecutar la API Principal:")
    print("   python main.py")
    print("   üìä URL: http://localhost:8000")
    print("   üìñ Docs: http://localhost:8000/docs")
    
    print("\n2Ô∏è‚É£ Ejecutar la App de Ejemplo (en otra terminal):")
    print("   python app_a_monitorear/main.py")
    print("   üéØ URL: http://localhost:8001")
    print("   üìñ Docs: http://localhost:8001/docs")
    
    print("\n3Ô∏è‚É£ Probar el sistema:")
    print("   ‚Ä¢ Visita http://localhost:8001/cpu-intensivo para generar carga")
    print("   ‚Ä¢ Luego visita http://localhost:8000/api/v1/metrics/cpu para ver m√©tricas")
    print("   ‚Ä¢ Prueba http://localhost:8000/api/v1/profile/demo/cpu-intensive")
    
    print("\n4Ô∏è‚É£ Endpoints importantes de la API:")
    print("   ‚Ä¢ M√©tricas CPU: /api/v1/metrics/cpu")
    print("   ‚Ä¢ M√©tricas Memoria: /api/v1/metrics/memory")
    print("   ‚Ä¢ Resumen Sistema: /api/v1/metrics/system-summary")
    print("   ‚Ä¢ Demo Perfilado: /api/v1/profile/demo/comprehensive")
    
    print("\nüéØ ¬°El proyecto est√° listo para usar!")


async def main():
    """Funci√≥n principal"""
    print_banner()
    
    # Probar m√≥dulos b√°sicos
    modules_ok = await test_api_connectivity()
    
    if modules_ok:
        # Probar API si est√° disponible
        await test_api_endpoints()
    
    # Mostrar instrucciones
    print_instructions()


if __name__ == "__main__":
    asyncio.run(main()) 