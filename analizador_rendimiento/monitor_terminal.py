#!/usr/bin/env python3
"""
Script principal para ejecutar el monitor de terminal con visualizaciones coloridas.
"""

import sys
import time
import os

# Agregar el directorio padre al path para importar m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from rich.console import Console
from rich.prompt import Prompt, IntPrompt, Confirm
from rich.panel import Panel
from rich.text import Text
from rich import box

from core.visualizacion import SystemVisualizer
from core.monitoring import SystemMonitor
from core.profiling import CodeProfiler


def mostrar_menu_principal():
    """Mostrar men√∫ principal del sistema"""
    console = Console()
    
    menu_text = """
[bold cyan]üñ•Ô∏è  ANALIZADOR DE RENDIMIENTO DEL SISTEMA[/bold cyan]

[green]‚úÖ Sistema de monitoreo iniciado correctamente[/green]

[yellow]Opciones disponibles:[/yellow]

[bold white]1.[/bold white] üìä [cyan]Resumen del sistema[/cyan]
[bold white]2.[/bold white] ‚ö° [green]Monitoreo en tiempo real[/green]
[bold white]3.[/bold white] üîç [blue]Demo de profiling[/blue]
[bold white]4.[/bold white] üìà [magenta]Comparaci√≥n de m√©tricas[/magenta]
[bold white]5.[/bold white] üö™ [red]Salir[/red]

[dim]Desarrollado para el curso de Sistemas Operativos[/dim]
    """
    
    panel = Panel(
        menu_text,
        title="[bold]MEN√ö PRINCIPAL",
        border_style="bright_blue",
        box=box.DOUBLE
    )
    
    console.print(panel)


def ejecutar_resumen_sistema():
    """Ejecutar resumen del sistema"""
    console = Console()
    visualizer = SystemVisualizer()
    
    console.clear()
    console.print("[bold green]üìä Generando resumen del sistema...[/bold green]\n")
    
    try:
        visualizer.show_system_summary()
        console.print("\n")
        Prompt.ask("[dim]Presiona Enter para continuar", default="", show_default=False)
    except Exception as e:
        console.print(f"[bold red]‚ùå Error: {e}[/bold red]")


def ejecutar_monitoreo_tiempo_real():
    """Ejecutar monitoreo en tiempo real"""
    console = Console()
    visualizer = SystemVisualizer()
    
    console.clear()
    console.print("[bold green]‚ö° Configuraci√≥n de monitoreo en tiempo real[/bold green]\n")
    
    # Opciones de frecuencia
    opciones = {
        1: ("0.5 segundos", 0.5),
        2: ("1 segundo", 1.0),
        3: ("2 segundos", 2.0),
        4: ("5 segundos", 5.0)
    }
    
    for key, (desc, _) in opciones.items():
        console.print(f"[bold]{key}.[/bold] {desc}")
    
    choice = IntPrompt.ask(
        "\nSelecciona la frecuencia de actualizaci√≥n",
        choices=["1", "2", "3", "4"],
        default=3
    )
    
    _, refresh_rate = opciones[choice]
    
    console.clear()
    console.print(f"[bold green]üöÄ Iniciando monitoreo (actualizaci√≥n cada {refresh_rate}s)[/bold green]")
    console.print("[dim]Presiona Ctrl+C para regresar al men√∫ principal[/dim]\n")
    
    try:
        visualizer.start_live_monitoring(refresh_rate)
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üîô Regresando al men√∫ principal...[/bold yellow]")
        time.sleep(1)


def ejecutar_demo_profiling():
    """Ejecutar demo de profiling"""
    console = Console()
    visualizer = SystemVisualizer()
    profiler = CodeProfiler()
    
    console.clear()
    console.print("[bold blue]üîç Demo de Profiling[/bold blue]\n")
    
    try:
        # Funci√≥n de ejemplo
        def funcion_demo():
            """Funci√≥n de ejemplo para hacer profiling"""
            import math
            import random
            
            resultado = 0
            for i in range(100000):
                resultado += math.sqrt(i) * math.sin(i) * random.random()
            
            # Fibonacci peque√±o
            def fib(n):
                if n <= 1:
                    return n
                return fib(n-1) + fib(n-2)
            
            fib_result = [fib(i) for i in range(20)]
            return resultado, fib_result
        
        console.print("[cyan]Ejecutando funci√≥n de demo para profiling...[/cyan]")
        results = profiler.profile_function(funcion_demo)
        
        # Mostrar resultados
        visualizer.show_profiling_results(results)
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Error en profiling: {e}[/bold red]")
    
    console.print("\n")
    Prompt.ask("[dim]Presiona Enter para continuar", default="", show_default=False)


def ejecutar_comparacion_metricas():
    """Ejecutar comparaci√≥n de m√©tricas"""
    console = Console()
    visualizer = SystemVisualizer()
    monitor = SystemMonitor()
    
    console.clear()
    console.print("[bold magenta]üìà Comparaci√≥n de m√©tricas del sistema[/bold magenta]\n")
    
    mediciones = []
    
    try:
        # Primera medici√≥n
        console.print("[cyan]Tomando primera medici√≥n...[/cyan]")
        
        cpu_metrics = monitor.get_cpu_metrics()
        memory_metrics = monitor.get_memory_metrics()
        disk_metrics = monitor.get_disk_io_metrics()
        
        primera_medicion = {
            'timestamp': time.strftime("%H:%M:%S"),
            'label': 'Inicial',
            'cpu_percent_total': cpu_metrics['cpu_percent_total'],
            'memory_percent': memory_metrics['virtual_memory']['percent'],
            'disk_read_rate': disk_metrics.get('read_rate', 0),
            'network_sent_rate': 0  # Simplificado para demo
        }
        mediciones.append(primera_medicion)
        
        console.print("[green]‚úÖ Primera medici√≥n completada[/green]\n")
        
        # Segunda medici√≥n despu√©s de un tiempo
        if Confirm.ask("¬øDeseas tomar una segunda medici√≥n?", default=True):
            tiempo_espera = IntPrompt.ask("¬øCu√°ntos segundos esperar?", default=5)
            
            console.print(f"[yellow]Esperando {tiempo_espera} segundos...[/yellow]")
            time.sleep(tiempo_espera)
            
            console.print("[cyan]Tomando segunda medici√≥n...[/cyan]")
            
            cpu_metrics = monitor.get_cpu_metrics()
            memory_metrics = monitor.get_memory_metrics()
            disk_metrics = monitor.get_disk_io_metrics()
            
            segunda_medicion = {
                'timestamp': time.strftime("%H:%M:%S"),
                'label': 'Despu√©s de espera',
                'cpu_percent_total': cpu_metrics['cpu_percent_total'],
                'memory_percent': memory_metrics['virtual_memory']['percent'],
                'disk_read_rate': disk_metrics.get('read_rate', 0),
                'network_sent_rate': 0
            }
            mediciones.append(segunda_medicion)
            
            console.print("[green]‚úÖ Segunda medici√≥n completada[/green]\n")
        
        # Mostrar comparaci√≥n
        if len(mediciones) > 1:
            visualizer.show_comparison_table(mediciones)
        else:
            console.print("[yellow]Se necesitan al menos 2 mediciones para comparar[/yellow]")
            
    except Exception as e:
        console.print(f"[bold red]‚ùå Error: {e}[/bold red]")
    
    console.print("\n")
    Prompt.ask("[dim]Presiona Enter para continuar", default="", show_default=False)


def main():
    """Funci√≥n principal"""
    console = Console()
    
    try:
        # Pantalla de bienvenida
        console.clear()
        
        bienvenida = """
[bold cyan]üñ•Ô∏è  ANALIZADOR DE RENDIMIENTO DEL SISTEMA[/bold cyan]

[green]‚úÖ Sistema de monitoreo iniciado correctamente[/green]

[yellow]Este sistema te permite:[/yellow]
‚Ä¢ Monitorear CPU, memoria y E/S en tiempo real
‚Ä¢ Realizar profiling de c√≥digo
‚Ä¢ Comparar m√©tricas del sistema
‚Ä¢ Visualizar datos de forma colorida en la terminal

[dim]Cargando interfaz...[/dim]
        """
        
        panel = Panel(
            bienvenida,
            title="[bold]BIENVENIDO",
            border_style="bright_blue",
            box=box.DOUBLE
        )
        
        console.print(panel)
        time.sleep(2)
        
        # Loop principal
        while True:
            console.clear()
            mostrar_menu_principal()
            
            try:
                opcion = IntPrompt.ask(
                    "Selecciona una opci√≥n",
                    choices=["1", "2", "3", "4", "5"],
                    default=5
                )
                
                if opcion == 1:
                    ejecutar_resumen_sistema()
                elif opcion == 2:
                    ejecutar_monitoreo_tiempo_real()
                elif opcion == 3:
                    ejecutar_demo_profiling()
                elif opcion == 4:
                    ejecutar_comparacion_metricas()
                elif opcion == 5:
                    break
                    
            except KeyboardInterrupt:
                console.print("\n[bold yellow]üîô Regresando al men√∫ principal...[/bold yellow]")
                time.sleep(1)
        
        # Despedida
        console.print("\n[bold green]¬°Gracias por usar el Analizador de Rendimiento![/bold green]")
        console.print("[dim]Hasta luego! üëã[/dim]\n")
        
    except KeyboardInterrupt:
        console.print("\n\n[bold red]üõë Aplicaci√≥n terminada por el usuario[/bold red]")
        sys.exit(0)
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Error fatal: {e}[/bold red]")
        sys.exit(1)


if __name__ == "__main__":
    main() 